
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Costureira
 * 
 */
export type Costureira = $Result.DefaultSelection<Prisma.$CostureiraPayload>
/**
 * Model Produto_has_costureira
 * 
 */
export type Produto_has_costureira = $Result.DefaultSelection<Prisma.$Produto_has_costureiraPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Tipo: {
  Tecido: 'Tecido'
};

export type Tipo = (typeof Tipo)[keyof typeof Tipo]

}

export type Tipo = $Enums.Tipo

export const Tipo: typeof $Enums.Tipo

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.costureira`: Exposes CRUD operations for the **Costureira** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Costureiras
    * const costureiras = await prisma.costureira.findMany()
    * ```
    */
  get costureira(): Prisma.CostureiraDelegate<ExtArgs>;

  /**
   * `prisma.produto_has_costureira`: Exposes CRUD operations for the **Produto_has_costureira** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produto_has_costureiras
    * const produto_has_costureiras = await prisma.produto_has_costureira.findMany()
    * ```
    */
  get produto_has_costureira(): Prisma.Produto_has_costureiraDelegate<ExtArgs>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Costureira: 'Costureira',
    Produto_has_costureira: 'Produto_has_costureira',
    Produto: 'Produto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'costureira' | 'produto_has_costureira' | 'produto'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Costureira: {
        payload: Prisma.$CostureiraPayload<ExtArgs>
        fields: Prisma.CostureiraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CostureiraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CostureiraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          findFirst: {
            args: Prisma.CostureiraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CostureiraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          findMany: {
            args: Prisma.CostureiraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>[]
          }
          create: {
            args: Prisma.CostureiraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          createMany: {
            args: Prisma.CostureiraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CostureiraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          update: {
            args: Prisma.CostureiraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          deleteMany: {
            args: Prisma.CostureiraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CostureiraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CostureiraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CostureiraPayload>
          }
          aggregate: {
            args: Prisma.CostureiraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCostureira>
          }
          groupBy: {
            args: Prisma.CostureiraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CostureiraGroupByOutputType>[]
          }
          count: {
            args: Prisma.CostureiraCountArgs<ExtArgs>,
            result: $Utils.Optional<CostureiraCountAggregateOutputType> | number
          }
        }
      }
      Produto_has_costureira: {
        payload: Prisma.$Produto_has_costureiraPayload<ExtArgs>
        fields: Prisma.Produto_has_costureiraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Produto_has_costureiraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Produto_has_costureiraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          findFirst: {
            args: Prisma.Produto_has_costureiraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Produto_has_costureiraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          findMany: {
            args: Prisma.Produto_has_costureiraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>[]
          }
          create: {
            args: Prisma.Produto_has_costureiraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          createMany: {
            args: Prisma.Produto_has_costureiraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Produto_has_costureiraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          update: {
            args: Prisma.Produto_has_costureiraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          deleteMany: {
            args: Prisma.Produto_has_costureiraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Produto_has_costureiraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Produto_has_costureiraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Produto_has_costureiraPayload>
          }
          aggregate: {
            args: Prisma.Produto_has_costureiraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduto_has_costureira>
          }
          groupBy: {
            args: Prisma.Produto_has_costureiraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Produto_has_costureiraGroupByOutputType>[]
          }
          count: {
            args: Prisma.Produto_has_costureiraCountArgs<ExtArgs>,
            result: $Utils.Optional<Produto_has_costureiraCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CostureiraCountOutputType
   */

  export type CostureiraCountOutputType = {
    producao: number
  }

  export type CostureiraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producao?: boolean | CostureiraCountOutputTypeCountProducaoArgs
  }

  // Custom InputTypes

  /**
   * CostureiraCountOutputType without action
   */
  export type CostureiraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostureiraCountOutputType
     */
    select?: CostureiraCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CostureiraCountOutputType without action
   */
  export type CostureiraCountOutputTypeCountProducaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Produto_has_costureiraWhereInput
  }



  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    producao: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producao?: boolean | ProdutoCountOutputTypeCountProducaoArgs
  }

  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountProducaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Produto_has_costureiraWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    senha?: boolean
  }


  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      senha: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
  }



  /**
   * Model Costureira
   */

  export type AggregateCostureira = {
    _count: CostureiraCountAggregateOutputType | null
    _avg: CostureiraAvgAggregateOutputType | null
    _sum: CostureiraSumAggregateOutputType | null
    _min: CostureiraMinAggregateOutputType | null
    _max: CostureiraMaxAggregateOutputType | null
  }

  export type CostureiraAvgAggregateOutputType = {
    id: number | null
    demandaQnt: number | null
  }

  export type CostureiraSumAggregateOutputType = {
    id: number | null
    demandaQnt: number | null
  }

  export type CostureiraMinAggregateOutputType = {
    id: number | null
    nome: string | null
    demandaQnt: number | null
    dataEntrega: Date | null
    endereco: string | null
  }

  export type CostureiraMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    demandaQnt: number | null
    dataEntrega: Date | null
    endereco: string | null
  }

  export type CostureiraCountAggregateOutputType = {
    id: number
    nome: number
    demandaQnt: number
    dataEntrega: number
    endereco: number
    _all: number
  }


  export type CostureiraAvgAggregateInputType = {
    id?: true
    demandaQnt?: true
  }

  export type CostureiraSumAggregateInputType = {
    id?: true
    demandaQnt?: true
  }

  export type CostureiraMinAggregateInputType = {
    id?: true
    nome?: true
    demandaQnt?: true
    dataEntrega?: true
    endereco?: true
  }

  export type CostureiraMaxAggregateInputType = {
    id?: true
    nome?: true
    demandaQnt?: true
    dataEntrega?: true
    endereco?: true
  }

  export type CostureiraCountAggregateInputType = {
    id?: true
    nome?: true
    demandaQnt?: true
    dataEntrega?: true
    endereco?: true
    _all?: true
  }

  export type CostureiraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Costureira to aggregate.
     */
    where?: CostureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Costureiras to fetch.
     */
    orderBy?: CostureiraOrderByWithRelationInput | CostureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CostureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Costureiras
    **/
    _count?: true | CostureiraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostureiraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostureiraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostureiraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostureiraMaxAggregateInputType
  }

  export type GetCostureiraAggregateType<T extends CostureiraAggregateArgs> = {
        [P in keyof T & keyof AggregateCostureira]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCostureira[P]>
      : GetScalarType<T[P], AggregateCostureira[P]>
  }




  export type CostureiraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostureiraWhereInput
    orderBy?: CostureiraOrderByWithAggregationInput | CostureiraOrderByWithAggregationInput[]
    by: CostureiraScalarFieldEnum[] | CostureiraScalarFieldEnum
    having?: CostureiraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostureiraCountAggregateInputType | true
    _avg?: CostureiraAvgAggregateInputType
    _sum?: CostureiraSumAggregateInputType
    _min?: CostureiraMinAggregateInputType
    _max?: CostureiraMaxAggregateInputType
  }

  export type CostureiraGroupByOutputType = {
    id: number
    nome: string
    demandaQnt: number
    dataEntrega: Date
    endereco: string
    _count: CostureiraCountAggregateOutputType | null
    _avg: CostureiraAvgAggregateOutputType | null
    _sum: CostureiraSumAggregateOutputType | null
    _min: CostureiraMinAggregateOutputType | null
    _max: CostureiraMaxAggregateOutputType | null
  }

  type GetCostureiraGroupByPayload<T extends CostureiraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CostureiraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostureiraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostureiraGroupByOutputType[P]>
            : GetScalarType<T[P], CostureiraGroupByOutputType[P]>
        }
      >
    >


  export type CostureiraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    demandaQnt?: boolean
    dataEntrega?: boolean
    endereco?: boolean
    producao?: boolean | Costureira$producaoArgs<ExtArgs>
    _count?: boolean | CostureiraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costureira"]>

  export type CostureiraSelectScalar = {
    id?: boolean
    nome?: boolean
    demandaQnt?: boolean
    dataEntrega?: boolean
    endereco?: boolean
  }

  export type CostureiraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producao?: boolean | Costureira$producaoArgs<ExtArgs>
    _count?: boolean | CostureiraCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CostureiraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Costureira"
    objects: {
      producao: Prisma.$Produto_has_costureiraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      demandaQnt: number
      dataEntrega: Date
      endereco: string
    }, ExtArgs["result"]["costureira"]>
    composites: {}
  }


  type CostureiraGetPayload<S extends boolean | null | undefined | CostureiraDefaultArgs> = $Result.GetResult<Prisma.$CostureiraPayload, S>

  type CostureiraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CostureiraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CostureiraCountAggregateInputType | true
    }

  export interface CostureiraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Costureira'], meta: { name: 'Costureira' } }
    /**
     * Find zero or one Costureira that matches the filter.
     * @param {CostureiraFindUniqueArgs} args - Arguments to find a Costureira
     * @example
     * // Get one Costureira
     * const costureira = await prisma.costureira.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CostureiraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraFindUniqueArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Costureira that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CostureiraFindUniqueOrThrowArgs} args - Arguments to find a Costureira
     * @example
     * // Get one Costureira
     * const costureira = await prisma.costureira.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CostureiraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Costureira that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraFindFirstArgs} args - Arguments to find a Costureira
     * @example
     * // Get one Costureira
     * const costureira = await prisma.costureira.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CostureiraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraFindFirstArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Costureira that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraFindFirstOrThrowArgs} args - Arguments to find a Costureira
     * @example
     * // Get one Costureira
     * const costureira = await prisma.costureira.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CostureiraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Costureiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Costureiras
     * const costureiras = await prisma.costureira.findMany()
     * 
     * // Get first 10 Costureiras
     * const costureiras = await prisma.costureira.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const costureiraWithIdOnly = await prisma.costureira.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CostureiraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Costureira.
     * @param {CostureiraCreateArgs} args - Arguments to create a Costureira.
     * @example
     * // Create one Costureira
     * const Costureira = await prisma.costureira.create({
     *   data: {
     *     // ... data to create a Costureira
     *   }
     * })
     * 
    **/
    create<T extends CostureiraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraCreateArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Costureiras.
     *     @param {CostureiraCreateManyArgs} args - Arguments to create many Costureiras.
     *     @example
     *     // Create many Costureiras
     *     const costureira = await prisma.costureira.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CostureiraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Costureira.
     * @param {CostureiraDeleteArgs} args - Arguments to delete one Costureira.
     * @example
     * // Delete one Costureira
     * const Costureira = await prisma.costureira.delete({
     *   where: {
     *     // ... filter to delete one Costureira
     *   }
     * })
     * 
    **/
    delete<T extends CostureiraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraDeleteArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Costureira.
     * @param {CostureiraUpdateArgs} args - Arguments to update one Costureira.
     * @example
     * // Update one Costureira
     * const costureira = await prisma.costureira.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CostureiraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraUpdateArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Costureiras.
     * @param {CostureiraDeleteManyArgs} args - Arguments to filter Costureiras to delete.
     * @example
     * // Delete a few Costureiras
     * const { count } = await prisma.costureira.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CostureiraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CostureiraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Costureiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Costureiras
     * const costureira = await prisma.costureira.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CostureiraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Costureira.
     * @param {CostureiraUpsertArgs} args - Arguments to update or create a Costureira.
     * @example
     * // Update or create a Costureira
     * const costureira = await prisma.costureira.upsert({
     *   create: {
     *     // ... data to create a Costureira
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Costureira we want to update
     *   }
     * })
    **/
    upsert<T extends CostureiraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CostureiraUpsertArgs<ExtArgs>>
    ): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Costureiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraCountArgs} args - Arguments to filter Costureiras to count.
     * @example
     * // Count the number of Costureiras
     * const count = await prisma.costureira.count({
     *   where: {
     *     // ... the filter for the Costureiras we want to count
     *   }
     * })
    **/
    count<T extends CostureiraCountArgs>(
      args?: Subset<T, CostureiraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostureiraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Costureira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostureiraAggregateArgs>(args: Subset<T, CostureiraAggregateArgs>): Prisma.PrismaPromise<GetCostureiraAggregateType<T>>

    /**
     * Group by Costureira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostureiraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CostureiraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CostureiraGroupByArgs['orderBy'] }
        : { orderBy?: CostureiraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CostureiraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostureiraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Costureira model
   */
  readonly fields: CostureiraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Costureira.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CostureiraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    producao<T extends Costureira$producaoArgs<ExtArgs> = {}>(args?: Subset<T, Costureira$producaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Costureira model
   */ 
  interface CostureiraFieldRefs {
    readonly id: FieldRef<"Costureira", 'Int'>
    readonly nome: FieldRef<"Costureira", 'String'>
    readonly demandaQnt: FieldRef<"Costureira", 'Int'>
    readonly dataEntrega: FieldRef<"Costureira", 'DateTime'>
    readonly endereco: FieldRef<"Costureira", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Costureira findUnique
   */
  export type CostureiraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter, which Costureira to fetch.
     */
    where: CostureiraWhereUniqueInput
  }


  /**
   * Costureira findUniqueOrThrow
   */
  export type CostureiraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter, which Costureira to fetch.
     */
    where: CostureiraWhereUniqueInput
  }


  /**
   * Costureira findFirst
   */
  export type CostureiraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter, which Costureira to fetch.
     */
    where?: CostureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Costureiras to fetch.
     */
    orderBy?: CostureiraOrderByWithRelationInput | CostureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Costureiras.
     */
    cursor?: CostureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Costureiras.
     */
    distinct?: CostureiraScalarFieldEnum | CostureiraScalarFieldEnum[]
  }


  /**
   * Costureira findFirstOrThrow
   */
  export type CostureiraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter, which Costureira to fetch.
     */
    where?: CostureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Costureiras to fetch.
     */
    orderBy?: CostureiraOrderByWithRelationInput | CostureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Costureiras.
     */
    cursor?: CostureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Costureiras.
     */
    distinct?: CostureiraScalarFieldEnum | CostureiraScalarFieldEnum[]
  }


  /**
   * Costureira findMany
   */
  export type CostureiraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter, which Costureiras to fetch.
     */
    where?: CostureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Costureiras to fetch.
     */
    orderBy?: CostureiraOrderByWithRelationInput | CostureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Costureiras.
     */
    cursor?: CostureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Costureiras.
     */
    skip?: number
    distinct?: CostureiraScalarFieldEnum | CostureiraScalarFieldEnum[]
  }


  /**
   * Costureira create
   */
  export type CostureiraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * The data needed to create a Costureira.
     */
    data: XOR<CostureiraCreateInput, CostureiraUncheckedCreateInput>
  }


  /**
   * Costureira createMany
   */
  export type CostureiraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Costureiras.
     */
    data: CostureiraCreateManyInput | CostureiraCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Costureira update
   */
  export type CostureiraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * The data needed to update a Costureira.
     */
    data: XOR<CostureiraUpdateInput, CostureiraUncheckedUpdateInput>
    /**
     * Choose, which Costureira to update.
     */
    where: CostureiraWhereUniqueInput
  }


  /**
   * Costureira updateMany
   */
  export type CostureiraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Costureiras.
     */
    data: XOR<CostureiraUpdateManyMutationInput, CostureiraUncheckedUpdateManyInput>
    /**
     * Filter which Costureiras to update
     */
    where?: CostureiraWhereInput
  }


  /**
   * Costureira upsert
   */
  export type CostureiraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * The filter to search for the Costureira to update in case it exists.
     */
    where: CostureiraWhereUniqueInput
    /**
     * In case the Costureira found by the `where` argument doesn't exist, create a new Costureira with this data.
     */
    create: XOR<CostureiraCreateInput, CostureiraUncheckedCreateInput>
    /**
     * In case the Costureira was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CostureiraUpdateInput, CostureiraUncheckedUpdateInput>
  }


  /**
   * Costureira delete
   */
  export type CostureiraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
    /**
     * Filter which Costureira to delete.
     */
    where: CostureiraWhereUniqueInput
  }


  /**
   * Costureira deleteMany
   */
  export type CostureiraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Costureiras to delete
     */
    where?: CostureiraWhereInput
  }


  /**
   * Costureira.producao
   */
  export type Costureira$producaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    where?: Produto_has_costureiraWhereInput
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    cursor?: Produto_has_costureiraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Produto_has_costureiraScalarFieldEnum | Produto_has_costureiraScalarFieldEnum[]
  }


  /**
   * Costureira without action
   */
  export type CostureiraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Costureira
     */
    select?: CostureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CostureiraInclude<ExtArgs> | null
  }



  /**
   * Model Produto_has_costureira
   */

  export type AggregateProduto_has_costureira = {
    _count: Produto_has_costureiraCountAggregateOutputType | null
    _avg: Produto_has_costureiraAvgAggregateOutputType | null
    _sum: Produto_has_costureiraSumAggregateOutputType | null
    _min: Produto_has_costureiraMinAggregateOutputType | null
    _max: Produto_has_costureiraMaxAggregateOutputType | null
  }

  export type Produto_has_costureiraAvgAggregateOutputType = {
    id: number | null
    costureiraId: number | null
    produtoId: number | null
  }

  export type Produto_has_costureiraSumAggregateOutputType = {
    id: number | null
    costureiraId: number | null
    produtoId: number | null
  }

  export type Produto_has_costureiraMinAggregateOutputType = {
    id: number | null
    costureiraId: number | null
    produtoId: number | null
  }

  export type Produto_has_costureiraMaxAggregateOutputType = {
    id: number | null
    costureiraId: number | null
    produtoId: number | null
  }

  export type Produto_has_costureiraCountAggregateOutputType = {
    id: number
    costureiraId: number
    produtoId: number
    _all: number
  }


  export type Produto_has_costureiraAvgAggregateInputType = {
    id?: true
    costureiraId?: true
    produtoId?: true
  }

  export type Produto_has_costureiraSumAggregateInputType = {
    id?: true
    costureiraId?: true
    produtoId?: true
  }

  export type Produto_has_costureiraMinAggregateInputType = {
    id?: true
    costureiraId?: true
    produtoId?: true
  }

  export type Produto_has_costureiraMaxAggregateInputType = {
    id?: true
    costureiraId?: true
    produtoId?: true
  }

  export type Produto_has_costureiraCountAggregateInputType = {
    id?: true
    costureiraId?: true
    produtoId?: true
    _all?: true
  }

  export type Produto_has_costureiraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto_has_costureira to aggregate.
     */
    where?: Produto_has_costureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produto_has_costureiras to fetch.
     */
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Produto_has_costureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produto_has_costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produto_has_costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produto_has_costureiras
    **/
    _count?: true | Produto_has_costureiraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Produto_has_costureiraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Produto_has_costureiraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Produto_has_costureiraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Produto_has_costureiraMaxAggregateInputType
  }

  export type GetProduto_has_costureiraAggregateType<T extends Produto_has_costureiraAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto_has_costureira]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto_has_costureira[P]>
      : GetScalarType<T[P], AggregateProduto_has_costureira[P]>
  }




  export type Produto_has_costureiraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Produto_has_costureiraWhereInput
    orderBy?: Produto_has_costureiraOrderByWithAggregationInput | Produto_has_costureiraOrderByWithAggregationInput[]
    by: Produto_has_costureiraScalarFieldEnum[] | Produto_has_costureiraScalarFieldEnum
    having?: Produto_has_costureiraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Produto_has_costureiraCountAggregateInputType | true
    _avg?: Produto_has_costureiraAvgAggregateInputType
    _sum?: Produto_has_costureiraSumAggregateInputType
    _min?: Produto_has_costureiraMinAggregateInputType
    _max?: Produto_has_costureiraMaxAggregateInputType
  }

  export type Produto_has_costureiraGroupByOutputType = {
    id: number
    costureiraId: number
    produtoId: number
    _count: Produto_has_costureiraCountAggregateOutputType | null
    _avg: Produto_has_costureiraAvgAggregateOutputType | null
    _sum: Produto_has_costureiraSumAggregateOutputType | null
    _min: Produto_has_costureiraMinAggregateOutputType | null
    _max: Produto_has_costureiraMaxAggregateOutputType | null
  }

  type GetProduto_has_costureiraGroupByPayload<T extends Produto_has_costureiraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Produto_has_costureiraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Produto_has_costureiraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Produto_has_costureiraGroupByOutputType[P]>
            : GetScalarType<T[P], Produto_has_costureiraGroupByOutputType[P]>
        }
      >
    >


  export type Produto_has_costureiraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    costureiraId?: boolean
    produtoId?: boolean
    costureira?: boolean | CostureiraDefaultArgs<ExtArgs>
    produtoResponsavel?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto_has_costureira"]>

  export type Produto_has_costureiraSelectScalar = {
    id?: boolean
    costureiraId?: boolean
    produtoId?: boolean
  }

  export type Produto_has_costureiraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    costureira?: boolean | CostureiraDefaultArgs<ExtArgs>
    produtoResponsavel?: boolean | ProdutoDefaultArgs<ExtArgs>
  }


  export type $Produto_has_costureiraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto_has_costureira"
    objects: {
      costureira: Prisma.$CostureiraPayload<ExtArgs>
      produtoResponsavel: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      costureiraId: number
      produtoId: number
    }, ExtArgs["result"]["produto_has_costureira"]>
    composites: {}
  }


  type Produto_has_costureiraGetPayload<S extends boolean | null | undefined | Produto_has_costureiraDefaultArgs> = $Result.GetResult<Prisma.$Produto_has_costureiraPayload, S>

  type Produto_has_costureiraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Produto_has_costureiraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Produto_has_costureiraCountAggregateInputType | true
    }

  export interface Produto_has_costureiraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto_has_costureira'], meta: { name: 'Produto_has_costureira' } }
    /**
     * Find zero or one Produto_has_costureira that matches the filter.
     * @param {Produto_has_costureiraFindUniqueArgs} args - Arguments to find a Produto_has_costureira
     * @example
     * // Get one Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Produto_has_costureiraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraFindUniqueArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produto_has_costureira that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Produto_has_costureiraFindUniqueOrThrowArgs} args - Arguments to find a Produto_has_costureira
     * @example
     * // Get one Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Produto_has_costureiraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produto_has_costureira that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraFindFirstArgs} args - Arguments to find a Produto_has_costureira
     * @example
     * // Get one Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Produto_has_costureiraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraFindFirstArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produto_has_costureira that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraFindFirstOrThrowArgs} args - Arguments to find a Produto_has_costureira
     * @example
     * // Get one Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Produto_has_costureiraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produto_has_costureiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produto_has_costureiras
     * const produto_has_costureiras = await prisma.produto_has_costureira.findMany()
     * 
     * // Get first 10 Produto_has_costureiras
     * const produto_has_costureiras = await prisma.produto_has_costureira.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produto_has_costureiraWithIdOnly = await prisma.produto_has_costureira.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Produto_has_costureiraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produto_has_costureira.
     * @param {Produto_has_costureiraCreateArgs} args - Arguments to create a Produto_has_costureira.
     * @example
     * // Create one Produto_has_costureira
     * const Produto_has_costureira = await prisma.produto_has_costureira.create({
     *   data: {
     *     // ... data to create a Produto_has_costureira
     *   }
     * })
     * 
    **/
    create<T extends Produto_has_costureiraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraCreateArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produto_has_costureiras.
     *     @param {Produto_has_costureiraCreateManyArgs} args - Arguments to create many Produto_has_costureiras.
     *     @example
     *     // Create many Produto_has_costureiras
     *     const produto_has_costureira = await prisma.produto_has_costureira.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Produto_has_costureiraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto_has_costureira.
     * @param {Produto_has_costureiraDeleteArgs} args - Arguments to delete one Produto_has_costureira.
     * @example
     * // Delete one Produto_has_costureira
     * const Produto_has_costureira = await prisma.produto_has_costureira.delete({
     *   where: {
     *     // ... filter to delete one Produto_has_costureira
     *   }
     * })
     * 
    **/
    delete<T extends Produto_has_costureiraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraDeleteArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produto_has_costureira.
     * @param {Produto_has_costureiraUpdateArgs} args - Arguments to update one Produto_has_costureira.
     * @example
     * // Update one Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Produto_has_costureiraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraUpdateArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produto_has_costureiras.
     * @param {Produto_has_costureiraDeleteManyArgs} args - Arguments to filter Produto_has_costureiras to delete.
     * @example
     * // Delete a few Produto_has_costureiras
     * const { count } = await prisma.produto_has_costureira.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Produto_has_costureiraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Produto_has_costureiraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produto_has_costureiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produto_has_costureiras
     * const produto_has_costureira = await prisma.produto_has_costureira.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Produto_has_costureiraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto_has_costureira.
     * @param {Produto_has_costureiraUpsertArgs} args - Arguments to update or create a Produto_has_costureira.
     * @example
     * // Update or create a Produto_has_costureira
     * const produto_has_costureira = await prisma.produto_has_costureira.upsert({
     *   create: {
     *     // ... data to create a Produto_has_costureira
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto_has_costureira we want to update
     *   }
     * })
    **/
    upsert<T extends Produto_has_costureiraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Produto_has_costureiraUpsertArgs<ExtArgs>>
    ): Prisma__Produto_has_costureiraClient<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produto_has_costureiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraCountArgs} args - Arguments to filter Produto_has_costureiras to count.
     * @example
     * // Count the number of Produto_has_costureiras
     * const count = await prisma.produto_has_costureira.count({
     *   where: {
     *     // ... the filter for the Produto_has_costureiras we want to count
     *   }
     * })
    **/
    count<T extends Produto_has_costureiraCountArgs>(
      args?: Subset<T, Produto_has_costureiraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Produto_has_costureiraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto_has_costureira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Produto_has_costureiraAggregateArgs>(args: Subset<T, Produto_has_costureiraAggregateArgs>): Prisma.PrismaPromise<GetProduto_has_costureiraAggregateType<T>>

    /**
     * Group by Produto_has_costureira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Produto_has_costureiraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Produto_has_costureiraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Produto_has_costureiraGroupByArgs['orderBy'] }
        : { orderBy?: Produto_has_costureiraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Produto_has_costureiraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduto_has_costureiraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto_has_costureira model
   */
  readonly fields: Produto_has_costureiraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto_has_costureira.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Produto_has_costureiraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    costureira<T extends CostureiraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CostureiraDefaultArgs<ExtArgs>>): Prisma__CostureiraClient<$Result.GetResult<Prisma.$CostureiraPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    produtoResponsavel<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Produto_has_costureira model
   */ 
  interface Produto_has_costureiraFieldRefs {
    readonly id: FieldRef<"Produto_has_costureira", 'Int'>
    readonly costureiraId: FieldRef<"Produto_has_costureira", 'Int'>
    readonly produtoId: FieldRef<"Produto_has_costureira", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Produto_has_costureira findUnique
   */
  export type Produto_has_costureiraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter, which Produto_has_costureira to fetch.
     */
    where: Produto_has_costureiraWhereUniqueInput
  }


  /**
   * Produto_has_costureira findUniqueOrThrow
   */
  export type Produto_has_costureiraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter, which Produto_has_costureira to fetch.
     */
    where: Produto_has_costureiraWhereUniqueInput
  }


  /**
   * Produto_has_costureira findFirst
   */
  export type Produto_has_costureiraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter, which Produto_has_costureira to fetch.
     */
    where?: Produto_has_costureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produto_has_costureiras to fetch.
     */
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produto_has_costureiras.
     */
    cursor?: Produto_has_costureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produto_has_costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produto_has_costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produto_has_costureiras.
     */
    distinct?: Produto_has_costureiraScalarFieldEnum | Produto_has_costureiraScalarFieldEnum[]
  }


  /**
   * Produto_has_costureira findFirstOrThrow
   */
  export type Produto_has_costureiraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter, which Produto_has_costureira to fetch.
     */
    where?: Produto_has_costureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produto_has_costureiras to fetch.
     */
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produto_has_costureiras.
     */
    cursor?: Produto_has_costureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produto_has_costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produto_has_costureiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produto_has_costureiras.
     */
    distinct?: Produto_has_costureiraScalarFieldEnum | Produto_has_costureiraScalarFieldEnum[]
  }


  /**
   * Produto_has_costureira findMany
   */
  export type Produto_has_costureiraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter, which Produto_has_costureiras to fetch.
     */
    where?: Produto_has_costureiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produto_has_costureiras to fetch.
     */
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produto_has_costureiras.
     */
    cursor?: Produto_has_costureiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produto_has_costureiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produto_has_costureiras.
     */
    skip?: number
    distinct?: Produto_has_costureiraScalarFieldEnum | Produto_has_costureiraScalarFieldEnum[]
  }


  /**
   * Produto_has_costureira create
   */
  export type Produto_has_costureiraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto_has_costureira.
     */
    data: XOR<Produto_has_costureiraCreateInput, Produto_has_costureiraUncheckedCreateInput>
  }


  /**
   * Produto_has_costureira createMany
   */
  export type Produto_has_costureiraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produto_has_costureiras.
     */
    data: Produto_has_costureiraCreateManyInput | Produto_has_costureiraCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Produto_has_costureira update
   */
  export type Produto_has_costureiraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto_has_costureira.
     */
    data: XOR<Produto_has_costureiraUpdateInput, Produto_has_costureiraUncheckedUpdateInput>
    /**
     * Choose, which Produto_has_costureira to update.
     */
    where: Produto_has_costureiraWhereUniqueInput
  }


  /**
   * Produto_has_costureira updateMany
   */
  export type Produto_has_costureiraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produto_has_costureiras.
     */
    data: XOR<Produto_has_costureiraUpdateManyMutationInput, Produto_has_costureiraUncheckedUpdateManyInput>
    /**
     * Filter which Produto_has_costureiras to update
     */
    where?: Produto_has_costureiraWhereInput
  }


  /**
   * Produto_has_costureira upsert
   */
  export type Produto_has_costureiraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto_has_costureira to update in case it exists.
     */
    where: Produto_has_costureiraWhereUniqueInput
    /**
     * In case the Produto_has_costureira found by the `where` argument doesn't exist, create a new Produto_has_costureira with this data.
     */
    create: XOR<Produto_has_costureiraCreateInput, Produto_has_costureiraUncheckedCreateInput>
    /**
     * In case the Produto_has_costureira was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Produto_has_costureiraUpdateInput, Produto_has_costureiraUncheckedUpdateInput>
  }


  /**
   * Produto_has_costureira delete
   */
  export type Produto_has_costureiraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    /**
     * Filter which Produto_has_costureira to delete.
     */
    where: Produto_has_costureiraWhereUniqueInput
  }


  /**
   * Produto_has_costureira deleteMany
   */
  export type Produto_has_costureiraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto_has_costureiras to delete
     */
    where?: Produto_has_costureiraWhereInput
  }


  /**
   * Produto_has_costureira without action
   */
  export type Produto_has_costureiraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
  }



  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    tipo: $Enums.Tipo | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    tipo: $Enums.Tipo | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    tipo: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    tipo?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    tipo?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    tipo?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    tipo: $Enums.Tipo
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    producao?: boolean | Produto$producaoArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    tipo?: boolean
  }

  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producao?: boolean | Produto$producaoArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      producao: Prisma.$Produto_has_costureiraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: $Enums.Tipo
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }


  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produtos.
     *     @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    producao<T extends Produto$producaoArgs<ExtArgs> = {}>(args?: Subset<T, Produto$producaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Produto_has_costureiraPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'Int'>
    readonly tipo: FieldRef<"Produto", 'Tipo'>
  }
    

  // Custom InputTypes

  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto.producao
   */
  export type Produto$producaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto_has_costureira
     */
    select?: Produto_has_costureiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Produto_has_costureiraInclude<ExtArgs> | null
    where?: Produto_has_costureiraWhereInput
    orderBy?: Produto_has_costureiraOrderByWithRelationInput | Produto_has_costureiraOrderByWithRelationInput[]
    cursor?: Produto_has_costureiraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Produto_has_costureiraScalarFieldEnum | Produto_has_costureiraScalarFieldEnum[]
  }


  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const CostureiraScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    demandaQnt: 'demandaQnt',
    dataEntrega: 'dataEntrega',
    endereco: 'endereco'
  };

  export type CostureiraScalarFieldEnum = (typeof CostureiraScalarFieldEnum)[keyof typeof CostureiraScalarFieldEnum]


  export const Produto_has_costureiraScalarFieldEnum: {
    id: 'id',
    costureiraId: 'costureiraId',
    produtoId: 'produtoId'
  };

  export type Produto_has_costureiraScalarFieldEnum = (typeof Produto_has_costureiraScalarFieldEnum)[keyof typeof Produto_has_costureiraScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Tipo'
   */
  export type EnumTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tipo'>
    


  /**
   * Reference to a field of type 'Tipo[]'
   */
  export type ListEnumTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tipo[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    senha?: StringFilter<"Usuario"> | string
  }, "id" | "nome">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type CostureiraWhereInput = {
    AND?: CostureiraWhereInput | CostureiraWhereInput[]
    OR?: CostureiraWhereInput[]
    NOT?: CostureiraWhereInput | CostureiraWhereInput[]
    id?: IntFilter<"Costureira"> | number
    nome?: StringFilter<"Costureira"> | string
    demandaQnt?: IntFilter<"Costureira"> | number
    dataEntrega?: DateTimeFilter<"Costureira"> | Date | string
    endereco?: StringFilter<"Costureira"> | string
    producao?: Produto_has_costureiraListRelationFilter
  }

  export type CostureiraOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    demandaQnt?: SortOrder
    dataEntrega?: SortOrder
    endereco?: SortOrder
    producao?: Produto_has_costureiraOrderByRelationAggregateInput
  }

  export type CostureiraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CostureiraWhereInput | CostureiraWhereInput[]
    OR?: CostureiraWhereInput[]
    NOT?: CostureiraWhereInput | CostureiraWhereInput[]
    nome?: StringFilter<"Costureira"> | string
    demandaQnt?: IntFilter<"Costureira"> | number
    dataEntrega?: DateTimeFilter<"Costureira"> | Date | string
    endereco?: StringFilter<"Costureira"> | string
    producao?: Produto_has_costureiraListRelationFilter
  }, "id">

  export type CostureiraOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    demandaQnt?: SortOrder
    dataEntrega?: SortOrder
    endereco?: SortOrder
    _count?: CostureiraCountOrderByAggregateInput
    _avg?: CostureiraAvgOrderByAggregateInput
    _max?: CostureiraMaxOrderByAggregateInput
    _min?: CostureiraMinOrderByAggregateInput
    _sum?: CostureiraSumOrderByAggregateInput
  }

  export type CostureiraScalarWhereWithAggregatesInput = {
    AND?: CostureiraScalarWhereWithAggregatesInput | CostureiraScalarWhereWithAggregatesInput[]
    OR?: CostureiraScalarWhereWithAggregatesInput[]
    NOT?: CostureiraScalarWhereWithAggregatesInput | CostureiraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Costureira"> | number
    nome?: StringWithAggregatesFilter<"Costureira"> | string
    demandaQnt?: IntWithAggregatesFilter<"Costureira"> | number
    dataEntrega?: DateTimeWithAggregatesFilter<"Costureira"> | Date | string
    endereco?: StringWithAggregatesFilter<"Costureira"> | string
  }

  export type Produto_has_costureiraWhereInput = {
    AND?: Produto_has_costureiraWhereInput | Produto_has_costureiraWhereInput[]
    OR?: Produto_has_costureiraWhereInput[]
    NOT?: Produto_has_costureiraWhereInput | Produto_has_costureiraWhereInput[]
    id?: IntFilter<"Produto_has_costureira"> | number
    costureiraId?: IntFilter<"Produto_has_costureira"> | number
    produtoId?: IntFilter<"Produto_has_costureira"> | number
    costureira?: XOR<CostureiraRelationFilter, CostureiraWhereInput>
    produtoResponsavel?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }

  export type Produto_has_costureiraOrderByWithRelationInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
    costureira?: CostureiraOrderByWithRelationInput
    produtoResponsavel?: ProdutoOrderByWithRelationInput
  }

  export type Produto_has_costureiraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Produto_has_costureiraWhereInput | Produto_has_costureiraWhereInput[]
    OR?: Produto_has_costureiraWhereInput[]
    NOT?: Produto_has_costureiraWhereInput | Produto_has_costureiraWhereInput[]
    costureiraId?: IntFilter<"Produto_has_costureira"> | number
    produtoId?: IntFilter<"Produto_has_costureira"> | number
    costureira?: XOR<CostureiraRelationFilter, CostureiraWhereInput>
    produtoResponsavel?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }, "id">

  export type Produto_has_costureiraOrderByWithAggregationInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
    _count?: Produto_has_costureiraCountOrderByAggregateInput
    _avg?: Produto_has_costureiraAvgOrderByAggregateInput
    _max?: Produto_has_costureiraMaxOrderByAggregateInput
    _min?: Produto_has_costureiraMinOrderByAggregateInput
    _sum?: Produto_has_costureiraSumOrderByAggregateInput
  }

  export type Produto_has_costureiraScalarWhereWithAggregatesInput = {
    AND?: Produto_has_costureiraScalarWhereWithAggregatesInput | Produto_has_costureiraScalarWhereWithAggregatesInput[]
    OR?: Produto_has_costureiraScalarWhereWithAggregatesInput[]
    NOT?: Produto_has_costureiraScalarWhereWithAggregatesInput | Produto_has_costureiraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto_has_costureira"> | number
    costureiraId?: IntWithAggregatesFilter<"Produto_has_costureira"> | number
    produtoId?: IntWithAggregatesFilter<"Produto_has_costureira"> | number
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: IntFilter<"Produto"> | number
    tipo?: EnumTipoFilter<"Produto"> | $Enums.Tipo
    producao?: Produto_has_costureiraListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    producao?: Produto_has_costureiraOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    tipo?: EnumTipoFilter<"Produto"> | $Enums.Tipo
    producao?: Produto_has_costureiraListRelationFilter
  }, "id">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto"> | number
    tipo?: EnumTipoWithAggregatesFilter<"Produto"> | $Enums.Tipo
  }

  export type UsuarioCreateInput = {
    nome: string
    senha: string
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    senha: string
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type CostureiraCreateInput = {
    nome: string
    demandaQnt: number
    dataEntrega: Date | string
    endereco: string
    producao?: Produto_has_costureiraCreateNestedManyWithoutCostureiraInput
  }

  export type CostureiraUncheckedCreateInput = {
    id?: number
    nome: string
    demandaQnt: number
    dataEntrega: Date | string
    endereco: string
    producao?: Produto_has_costureiraUncheckedCreateNestedManyWithoutCostureiraInput
  }

  export type CostureiraUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
    producao?: Produto_has_costureiraUpdateManyWithoutCostureiraNestedInput
  }

  export type CostureiraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
    producao?: Produto_has_costureiraUncheckedUpdateManyWithoutCostureiraNestedInput
  }

  export type CostureiraCreateManyInput = {
    id?: number
    nome: string
    demandaQnt: number
    dataEntrega: Date | string
    endereco: string
  }

  export type CostureiraUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type CostureiraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type Produto_has_costureiraCreateInput = {
    costureira: CostureiraCreateNestedOneWithoutProducaoInput
    produtoResponsavel: ProdutoCreateNestedOneWithoutProducaoInput
  }

  export type Produto_has_costureiraUncheckedCreateInput = {
    id?: number
    costureiraId: number
    produtoId: number
  }

  export type Produto_has_costureiraUpdateInput = {
    costureira?: CostureiraUpdateOneRequiredWithoutProducaoNestedInput
    produtoResponsavel?: ProdutoUpdateOneRequiredWithoutProducaoNestedInput
  }

  export type Produto_has_costureiraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    costureiraId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type Produto_has_costureiraCreateManyInput = {
    id?: number
    costureiraId: number
    produtoId: number
  }

  export type Produto_has_costureiraUpdateManyMutationInput = {

  }

  export type Produto_has_costureiraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    costureiraId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateInput = {
    tipo: $Enums.Tipo
    producao?: Produto_has_costureiraCreateNestedManyWithoutProdutoResponsavelInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    tipo: $Enums.Tipo
    producao?: Produto_has_costureiraUncheckedCreateNestedManyWithoutProdutoResponsavelInput
  }

  export type ProdutoUpdateInput = {
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    producao?: Produto_has_costureiraUpdateManyWithoutProdutoResponsavelNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    producao?: Produto_has_costureiraUncheckedUpdateManyWithoutProdutoResponsavelNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    tipo: $Enums.Tipo
  }

  export type ProdutoUpdateManyMutationInput = {
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Produto_has_costureiraListRelationFilter = {
    every?: Produto_has_costureiraWhereInput
    some?: Produto_has_costureiraWhereInput
    none?: Produto_has_costureiraWhereInput
  }

  export type Produto_has_costureiraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CostureiraCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    demandaQnt?: SortOrder
    dataEntrega?: SortOrder
    endereco?: SortOrder
  }

  export type CostureiraAvgOrderByAggregateInput = {
    id?: SortOrder
    demandaQnt?: SortOrder
  }

  export type CostureiraMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    demandaQnt?: SortOrder
    dataEntrega?: SortOrder
    endereco?: SortOrder
  }

  export type CostureiraMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    demandaQnt?: SortOrder
    dataEntrega?: SortOrder
    endereco?: SortOrder
  }

  export type CostureiraSumOrderByAggregateInput = {
    id?: SortOrder
    demandaQnt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CostureiraRelationFilter = {
    is?: CostureiraWhereInput
    isNot?: CostureiraWhereInput
  }

  export type ProdutoRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type Produto_has_costureiraCountOrderByAggregateInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
  }

  export type Produto_has_costureiraAvgOrderByAggregateInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
  }

  export type Produto_has_costureiraMaxOrderByAggregateInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
  }

  export type Produto_has_costureiraMinOrderByAggregateInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
  }

  export type Produto_has_costureiraSumOrderByAggregateInput = {
    id?: SortOrder
    costureiraId?: SortOrder
    produtoId?: SortOrder
  }

  export type EnumTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFilter<$PrismaModel> | $Enums.Tipo
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoWithAggregatesFilter<$PrismaModel> | $Enums.Tipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFilter<$PrismaModel>
    _max?: NestedEnumTipoFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Produto_has_costureiraCreateNestedManyWithoutCostureiraInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput> | Produto_has_costureiraCreateWithoutCostureiraInput[] | Produto_has_costureiraUncheckedCreateWithoutCostureiraInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutCostureiraInput | Produto_has_costureiraCreateOrConnectWithoutCostureiraInput[]
    createMany?: Produto_has_costureiraCreateManyCostureiraInputEnvelope
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
  }

  export type Produto_has_costureiraUncheckedCreateNestedManyWithoutCostureiraInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput> | Produto_has_costureiraCreateWithoutCostureiraInput[] | Produto_has_costureiraUncheckedCreateWithoutCostureiraInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutCostureiraInput | Produto_has_costureiraCreateOrConnectWithoutCostureiraInput[]
    createMany?: Produto_has_costureiraCreateManyCostureiraInputEnvelope
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Produto_has_costureiraUpdateManyWithoutCostureiraNestedInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput> | Produto_has_costureiraCreateWithoutCostureiraInput[] | Produto_has_costureiraUncheckedCreateWithoutCostureiraInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutCostureiraInput | Produto_has_costureiraCreateOrConnectWithoutCostureiraInput[]
    upsert?: Produto_has_costureiraUpsertWithWhereUniqueWithoutCostureiraInput | Produto_has_costureiraUpsertWithWhereUniqueWithoutCostureiraInput[]
    createMany?: Produto_has_costureiraCreateManyCostureiraInputEnvelope
    set?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    disconnect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    delete?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    update?: Produto_has_costureiraUpdateWithWhereUniqueWithoutCostureiraInput | Produto_has_costureiraUpdateWithWhereUniqueWithoutCostureiraInput[]
    updateMany?: Produto_has_costureiraUpdateManyWithWhereWithoutCostureiraInput | Produto_has_costureiraUpdateManyWithWhereWithoutCostureiraInput[]
    deleteMany?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
  }

  export type Produto_has_costureiraUncheckedUpdateManyWithoutCostureiraNestedInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput> | Produto_has_costureiraCreateWithoutCostureiraInput[] | Produto_has_costureiraUncheckedCreateWithoutCostureiraInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutCostureiraInput | Produto_has_costureiraCreateOrConnectWithoutCostureiraInput[]
    upsert?: Produto_has_costureiraUpsertWithWhereUniqueWithoutCostureiraInput | Produto_has_costureiraUpsertWithWhereUniqueWithoutCostureiraInput[]
    createMany?: Produto_has_costureiraCreateManyCostureiraInputEnvelope
    set?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    disconnect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    delete?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    update?: Produto_has_costureiraUpdateWithWhereUniqueWithoutCostureiraInput | Produto_has_costureiraUpdateWithWhereUniqueWithoutCostureiraInput[]
    updateMany?: Produto_has_costureiraUpdateManyWithWhereWithoutCostureiraInput | Produto_has_costureiraUpdateManyWithWhereWithoutCostureiraInput[]
    deleteMany?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
  }

  export type CostureiraCreateNestedOneWithoutProducaoInput = {
    create?: XOR<CostureiraCreateWithoutProducaoInput, CostureiraUncheckedCreateWithoutProducaoInput>
    connectOrCreate?: CostureiraCreateOrConnectWithoutProducaoInput
    connect?: CostureiraWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutProducaoInput = {
    create?: XOR<ProdutoCreateWithoutProducaoInput, ProdutoUncheckedCreateWithoutProducaoInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutProducaoInput
    connect?: ProdutoWhereUniqueInput
  }

  export type CostureiraUpdateOneRequiredWithoutProducaoNestedInput = {
    create?: XOR<CostureiraCreateWithoutProducaoInput, CostureiraUncheckedCreateWithoutProducaoInput>
    connectOrCreate?: CostureiraCreateOrConnectWithoutProducaoInput
    upsert?: CostureiraUpsertWithoutProducaoInput
    connect?: CostureiraWhereUniqueInput
    update?: XOR<XOR<CostureiraUpdateToOneWithWhereWithoutProducaoInput, CostureiraUpdateWithoutProducaoInput>, CostureiraUncheckedUpdateWithoutProducaoInput>
  }

  export type ProdutoUpdateOneRequiredWithoutProducaoNestedInput = {
    create?: XOR<ProdutoCreateWithoutProducaoInput, ProdutoUncheckedCreateWithoutProducaoInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutProducaoInput
    upsert?: ProdutoUpsertWithoutProducaoInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutProducaoInput, ProdutoUpdateWithoutProducaoInput>, ProdutoUncheckedUpdateWithoutProducaoInput>
  }

  export type Produto_has_costureiraCreateNestedManyWithoutProdutoResponsavelInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput> | Produto_has_costureiraCreateWithoutProdutoResponsavelInput[] | Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput | Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput[]
    createMany?: Produto_has_costureiraCreateManyProdutoResponsavelInputEnvelope
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
  }

  export type Produto_has_costureiraUncheckedCreateNestedManyWithoutProdutoResponsavelInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput> | Produto_has_costureiraCreateWithoutProdutoResponsavelInput[] | Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput | Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput[]
    createMany?: Produto_has_costureiraCreateManyProdutoResponsavelInputEnvelope
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
  }

  export type EnumTipoFieldUpdateOperationsInput = {
    set?: $Enums.Tipo
  }

  export type Produto_has_costureiraUpdateManyWithoutProdutoResponsavelNestedInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput> | Produto_has_costureiraCreateWithoutProdutoResponsavelInput[] | Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput | Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput[]
    upsert?: Produto_has_costureiraUpsertWithWhereUniqueWithoutProdutoResponsavelInput | Produto_has_costureiraUpsertWithWhereUniqueWithoutProdutoResponsavelInput[]
    createMany?: Produto_has_costureiraCreateManyProdutoResponsavelInputEnvelope
    set?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    disconnect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    delete?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    update?: Produto_has_costureiraUpdateWithWhereUniqueWithoutProdutoResponsavelInput | Produto_has_costureiraUpdateWithWhereUniqueWithoutProdutoResponsavelInput[]
    updateMany?: Produto_has_costureiraUpdateManyWithWhereWithoutProdutoResponsavelInput | Produto_has_costureiraUpdateManyWithWhereWithoutProdutoResponsavelInput[]
    deleteMany?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
  }

  export type Produto_has_costureiraUncheckedUpdateManyWithoutProdutoResponsavelNestedInput = {
    create?: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput> | Produto_has_costureiraCreateWithoutProdutoResponsavelInput[] | Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput[]
    connectOrCreate?: Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput | Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput[]
    upsert?: Produto_has_costureiraUpsertWithWhereUniqueWithoutProdutoResponsavelInput | Produto_has_costureiraUpsertWithWhereUniqueWithoutProdutoResponsavelInput[]
    createMany?: Produto_has_costureiraCreateManyProdutoResponsavelInputEnvelope
    set?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    disconnect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    delete?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    connect?: Produto_has_costureiraWhereUniqueInput | Produto_has_costureiraWhereUniqueInput[]
    update?: Produto_has_costureiraUpdateWithWhereUniqueWithoutProdutoResponsavelInput | Produto_has_costureiraUpdateWithWhereUniqueWithoutProdutoResponsavelInput[]
    updateMany?: Produto_has_costureiraUpdateManyWithWhereWithoutProdutoResponsavelInput | Produto_has_costureiraUpdateManyWithWhereWithoutProdutoResponsavelInput[]
    deleteMany?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFilter<$PrismaModel> | $Enums.Tipo
  }

  export type NestedEnumTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoWithAggregatesFilter<$PrismaModel> | $Enums.Tipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFilter<$PrismaModel>
    _max?: NestedEnumTipoFilter<$PrismaModel>
  }

  export type Produto_has_costureiraCreateWithoutCostureiraInput = {
    produtoResponsavel: ProdutoCreateNestedOneWithoutProducaoInput
  }

  export type Produto_has_costureiraUncheckedCreateWithoutCostureiraInput = {
    id?: number
    produtoId: number
  }

  export type Produto_has_costureiraCreateOrConnectWithoutCostureiraInput = {
    where: Produto_has_costureiraWhereUniqueInput
    create: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput>
  }

  export type Produto_has_costureiraCreateManyCostureiraInputEnvelope = {
    data: Produto_has_costureiraCreateManyCostureiraInput | Produto_has_costureiraCreateManyCostureiraInput[]
    skipDuplicates?: boolean
  }

  export type Produto_has_costureiraUpsertWithWhereUniqueWithoutCostureiraInput = {
    where: Produto_has_costureiraWhereUniqueInput
    update: XOR<Produto_has_costureiraUpdateWithoutCostureiraInput, Produto_has_costureiraUncheckedUpdateWithoutCostureiraInput>
    create: XOR<Produto_has_costureiraCreateWithoutCostureiraInput, Produto_has_costureiraUncheckedCreateWithoutCostureiraInput>
  }

  export type Produto_has_costureiraUpdateWithWhereUniqueWithoutCostureiraInput = {
    where: Produto_has_costureiraWhereUniqueInput
    data: XOR<Produto_has_costureiraUpdateWithoutCostureiraInput, Produto_has_costureiraUncheckedUpdateWithoutCostureiraInput>
  }

  export type Produto_has_costureiraUpdateManyWithWhereWithoutCostureiraInput = {
    where: Produto_has_costureiraScalarWhereInput
    data: XOR<Produto_has_costureiraUpdateManyMutationInput, Produto_has_costureiraUncheckedUpdateManyWithoutCostureiraInput>
  }

  export type Produto_has_costureiraScalarWhereInput = {
    AND?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
    OR?: Produto_has_costureiraScalarWhereInput[]
    NOT?: Produto_has_costureiraScalarWhereInput | Produto_has_costureiraScalarWhereInput[]
    id?: IntFilter<"Produto_has_costureira"> | number
    costureiraId?: IntFilter<"Produto_has_costureira"> | number
    produtoId?: IntFilter<"Produto_has_costureira"> | number
  }

  export type CostureiraCreateWithoutProducaoInput = {
    nome: string
    demandaQnt: number
    dataEntrega: Date | string
    endereco: string
  }

  export type CostureiraUncheckedCreateWithoutProducaoInput = {
    id?: number
    nome: string
    demandaQnt: number
    dataEntrega: Date | string
    endereco: string
  }

  export type CostureiraCreateOrConnectWithoutProducaoInput = {
    where: CostureiraWhereUniqueInput
    create: XOR<CostureiraCreateWithoutProducaoInput, CostureiraUncheckedCreateWithoutProducaoInput>
  }

  export type ProdutoCreateWithoutProducaoInput = {
    tipo: $Enums.Tipo
  }

  export type ProdutoUncheckedCreateWithoutProducaoInput = {
    id?: number
    tipo: $Enums.Tipo
  }

  export type ProdutoCreateOrConnectWithoutProducaoInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutProducaoInput, ProdutoUncheckedCreateWithoutProducaoInput>
  }

  export type CostureiraUpsertWithoutProducaoInput = {
    update: XOR<CostureiraUpdateWithoutProducaoInput, CostureiraUncheckedUpdateWithoutProducaoInput>
    create: XOR<CostureiraCreateWithoutProducaoInput, CostureiraUncheckedCreateWithoutProducaoInput>
    where?: CostureiraWhereInput
  }

  export type CostureiraUpdateToOneWithWhereWithoutProducaoInput = {
    where?: CostureiraWhereInput
    data: XOR<CostureiraUpdateWithoutProducaoInput, CostureiraUncheckedUpdateWithoutProducaoInput>
  }

  export type CostureiraUpdateWithoutProducaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type CostureiraUncheckedUpdateWithoutProducaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    demandaQnt?: IntFieldUpdateOperationsInput | number
    dataEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUpsertWithoutProducaoInput = {
    update: XOR<ProdutoUpdateWithoutProducaoInput, ProdutoUncheckedUpdateWithoutProducaoInput>
    create: XOR<ProdutoCreateWithoutProducaoInput, ProdutoUncheckedCreateWithoutProducaoInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutProducaoInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutProducaoInput, ProdutoUncheckedUpdateWithoutProducaoInput>
  }

  export type ProdutoUpdateWithoutProducaoInput = {
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
  }

  export type ProdutoUncheckedUpdateWithoutProducaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
  }

  export type Produto_has_costureiraCreateWithoutProdutoResponsavelInput = {
    costureira: CostureiraCreateNestedOneWithoutProducaoInput
  }

  export type Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput = {
    id?: number
    costureiraId: number
  }

  export type Produto_has_costureiraCreateOrConnectWithoutProdutoResponsavelInput = {
    where: Produto_has_costureiraWhereUniqueInput
    create: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput>
  }

  export type Produto_has_costureiraCreateManyProdutoResponsavelInputEnvelope = {
    data: Produto_has_costureiraCreateManyProdutoResponsavelInput | Produto_has_costureiraCreateManyProdutoResponsavelInput[]
    skipDuplicates?: boolean
  }

  export type Produto_has_costureiraUpsertWithWhereUniqueWithoutProdutoResponsavelInput = {
    where: Produto_has_costureiraWhereUniqueInput
    update: XOR<Produto_has_costureiraUpdateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedUpdateWithoutProdutoResponsavelInput>
    create: XOR<Produto_has_costureiraCreateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedCreateWithoutProdutoResponsavelInput>
  }

  export type Produto_has_costureiraUpdateWithWhereUniqueWithoutProdutoResponsavelInput = {
    where: Produto_has_costureiraWhereUniqueInput
    data: XOR<Produto_has_costureiraUpdateWithoutProdutoResponsavelInput, Produto_has_costureiraUncheckedUpdateWithoutProdutoResponsavelInput>
  }

  export type Produto_has_costureiraUpdateManyWithWhereWithoutProdutoResponsavelInput = {
    where: Produto_has_costureiraScalarWhereInput
    data: XOR<Produto_has_costureiraUpdateManyMutationInput, Produto_has_costureiraUncheckedUpdateManyWithoutProdutoResponsavelInput>
  }

  export type Produto_has_costureiraCreateManyCostureiraInput = {
    id?: number
    produtoId: number
  }

  export type Produto_has_costureiraUpdateWithoutCostureiraInput = {
    produtoResponsavel?: ProdutoUpdateOneRequiredWithoutProducaoNestedInput
  }

  export type Produto_has_costureiraUncheckedUpdateWithoutCostureiraInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type Produto_has_costureiraUncheckedUpdateManyWithoutCostureiraInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type Produto_has_costureiraCreateManyProdutoResponsavelInput = {
    id?: number
    costureiraId: number
  }

  export type Produto_has_costureiraUpdateWithoutProdutoResponsavelInput = {
    costureira?: CostureiraUpdateOneRequiredWithoutProducaoNestedInput
  }

  export type Produto_has_costureiraUncheckedUpdateWithoutProdutoResponsavelInput = {
    id?: IntFieldUpdateOperationsInput | number
    costureiraId?: IntFieldUpdateOperationsInput | number
  }

  export type Produto_has_costureiraUncheckedUpdateManyWithoutProdutoResponsavelInput = {
    id?: IntFieldUpdateOperationsInput | number
    costureiraId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CostureiraCountOutputTypeDefaultArgs instead
     */
    export type CostureiraCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CostureiraCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoCountOutputTypeDefaultArgs instead
     */
    export type ProdutoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CostureiraDefaultArgs instead
     */
    export type CostureiraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CostureiraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Produto_has_costureiraDefaultArgs instead
     */
    export type Produto_has_costureiraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Produto_has_costureiraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoDefaultArgs instead
     */
    export type ProdutoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}